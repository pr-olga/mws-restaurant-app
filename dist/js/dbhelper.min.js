class DBHelper{static get DATABASE_URL(){return"http://localhost:3000/data/restaurants.json"}static fetchRestaurants(t){let e=new XMLHttpRequest;e.open("GET",DBHelper.DATABASE_URL),e.onload=(()=>{if(200===e.status){const a=JSON.parse(e.responseText).restaurants;t(null,a)}else{const a=`Request failed. Returned status of ${e.status}`;t(a,null)}}),e.send()}static fetchRestaurantById(t,e){DBHelper.fetchRestaurants((a,s)=>{if(a)e(a,null);else{const a=s.find(e=>e.id==t);a?e(null,a):e("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((a,s)=>{if(a)e(a,null);else{const a=s.filter(e=>e.cuisine_type==t);e(null,a)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((a,s)=>{if(a)e(a,null);else{const a=s.filter(e=>e.neighborhood==t);e(null,a)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,a){DBHelper.fetchRestaurants((s,l)=>{if(s)a(s,null);else{let s=l;"all"!=t&&(s=s.filter(e=>e.cuisine_type==t)),"all"!=e&&(s=s.filter(t=>t.neighborhood==e)),a(null,s)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].neighborhood),s=e.filter((t,a)=>e.indexOf(t)==a);t(null,s)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,a)=>{if(e)t(e,null);else{const e=a.map((t,e)=>a[e].cuisine_type),s=e.filter((t,a)=>e.indexOf(t)==a);t(null,s)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`./img/${t.photograph}`}static smallImageUrlForRestaurant(t){return`./img/${t.photographSmall} 1x, /img/${t.photograph} 2x`}static imageAltForRestaurant(t){return`${t.alt}`}static mapMarkerForRestaurant(t,e){const a=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:DBHelper.urlForRestaurant(t)});return a.addTo(newMap),a}}